{"version":3,"file":"angular-trackjs.min.js","names":[],"mappings":"","sources":["angular-trackjs.min.js"],"sourcesContent":["/*!\n * Angular TrackJs v0.1.0\n *\n * Â© 2015, Jamie Le Souef <jamielesouef@gmail.com>\n */\n\n(function (angular) {\n\n    'use strict';\n\n    angular.module('trackJs', []);\n\n    var configure = function (windowObj) {\n        return function (options) {\n\n            if (options && windowObj.trackJs) {\n                windowObj.trackJs.configure(options);\n            }\n        };\n    };\n\n    angular.module('trackJs').config([\"$provide\", function ($provide) {\n        $provide.decorator(\"$exceptionHandler\", [\"$delegate\", \"exceptionHandlerDecorator\", function ($delegate, exceptionHandlerDecorator) {\n            return exceptionHandlerDecorator.decorate($delegate);\n        }]);\n    }]);\n\n    angular.module('trackJs').factory('exceptionHandlerDecorator', [\"$window\", function ($window) {\n        var decorate = function ($delegate) {\n            return function (exception, cause) {\n                if ($window.trackJs) {\n                    $window.trackJs.track(exception);\n                }\n\n                $delegate(exception, cause);\n            };\n        };\n\n        return {\n            decorate: decorate\n        };\n    }]);\n\n    angular.module('trackJs').factory('trackJs', [\"$window\", function ($window) {\n\n        var ignoreErrorList = [];\n\n        var track = function (message) {\n            $window.trackJs.track(message);\n        };\n\n        var ignore = function (list) {\n            ignoreErrorList = ignoreErrorList.concat(list);\n\n            var onError = function (payload) {\n\n                var test = function (what, where) {\n                    return (what instanceof RegExp) ? what.test(where) : what === where;\n                };\n\n                var checkNetwork = function (expectedValue, networkProperty) {\n                    return payload.network\n                        .map(function (request) {\n                            return test(expectedValue, request[networkProperty]);\n                        })\n                        .some(function (error) {\n                            return test(error, true);\n                        });\n                };\n\n                var validateError = function (errorCheck) {\n\n                    var errorMatch = [];\n\n                    for (var property in errorCheck) {\n                        var expectedValue = errorCheck[property];\n\n                        if (property === 'pageUrl') {\n                            errorMatch.push(test(expectedValue, payload.url));\n                        } else if (property === 'message') {\n                            errorMatch.push(test(errorCheck.message, payload.message));\n                        } else {\n                            errorMatch.push(checkNetwork(expectedValue, property));\n                        }\n                    }\n\n                    errorMatch = errorMatch.every(function (error) {\n                        return test(error, true);\n                    });\n\n                    return errorMatch;\n                };\n\n                return !ignoreErrorList.map(validateError).some(function (error) {\n                    return test(error, true);\n                });\n            };\n\n            this.configure({\n                onError: onError\n            });\n        };\n\n        return {\n            track: track,\n            ignore: ignore,\n            configure: configure($window)\n        };\n    }]);\n\n    angular.module('trackJs').provider('TrackJs', function () {\n        this.configure = configure(window);\n        this.$get = angular.noop;\n    });\n\n})\n(angular);\n"],"sourceRoot":"/source/"}